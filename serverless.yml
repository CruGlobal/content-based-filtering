service: content-based-filtering

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  stage: ${env:ENVIRONMENT}
  runtime: nodejs14.x
  region: us-east-1
  vpc:
    securityGroupIds:
      - ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.webapp_elb_sg}
    subnetIds: ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.prod_apps_1_all}
  stackTags:
    Name: ${env:PROJECT_NAME}-${self:custom.environmentMap.${env:ENVIRONMENT}}
    owner: apps@cru.org
    application: ${env:PROJECT_NAME}
    env: ${self:custom.environmentMap.${env:ENVIRONMENT}}
    managed_by: serverless-framework
    function: lambda
  environment: ${file(env.js)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource:
        - arn:aws:s3:::${env:S3_BUCKET_NAME}
        - arn:aws:s3:::${env:S3_BUCKET_NAME}/*
  apiGateway:
    apiKeys:
      - name: ${env:PROJECT_NAME}-${self:custom.environmentMap.${env:ENVIRONMENT}}-webhookApiKey
        description: API Key for authorizing webhook requests
        value: ${env:WEBHOOK_API_KEY}
    usagePlan:
      quota:
        limit: 3000
        period: MONTH
      throttle:
        burstLimit: 1
        rateLimit: 1

package:
  individually: true
  include:
    - keyfile.json
  exclude:
    - test/**
    - '**/*.test.js'
    - .deployment/**

custom:
  environmentMap:
    production: prod
    staging: stage
    development: dev
    lab: lab

functions:
  handler:
    handler: src/index.handler
    events:
      - http: # See https://www.serverless.com/framework/docs/providers/aws/events/apigateway/
          path: webhook
          method: post
          cors: true # See https://www.serverless.com/framework/docs/providers/aws/events/apigateway#enabling-cors
          private: true # requires apiGateway apiKey
